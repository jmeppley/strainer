<project name="strainer" default="compile" basedir=".">
    <description>
        simple build file for the strainer java project
    </description>

  <!-- set global properties for this build -->
  <property name="my.version" value="0.9.7b"/>
  <property name="src" location="src"/>
  <property name="build" location="build"/>
  <property name="my.dist.name" value="Strainer-${my.version}"/>
  <property name="my.source.name" value="Strainer-${my.version}-src"/>
  <property name="dist"  location="${my.dist.name}"/>
  <property name="my.main.class" value="amd.strainer.display.Main"/>

  <path id="project.build.class.path">
    <pathelement location="lib/biojava-1.7.1.jar"/>
    <pathelement location="lib/junit-4.4.jar"/>
    <pathelement location="lib/jaligner.jar"/>
  </path>
  <path id="project.run.class.path">
    <pathelement location="lib/biojava-1.7.1.jar"/>
    <pathelement location="lib/jlfgr-1_0.jar"/>
    <pathelement location="lib/bytecode.jar"/>
    <pathelement location="lib/jaligner.jar"/>
    <pathelement path="build/"/>
    <pathelement path="src/"/>
  </path>

  <target name="init">
    <!-- Create the time stamp -->
    <tstamp/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}"/>
    <!-- Create the distribution directory -->
    <mkdir dir="${dist}/lib"/>
  </target>

  <target name="compile" depends="init"
        description="compile the source " >
    <!-- Compile the java code from ${src} into ${build} -->
    <javac srcdir="${src}" destdir="${build}">
      <classpath refid="project.build.class.path"/>
    </javac>
  </target>

  <target name="genes" depends="compile"
          description="run gene strainer on all genes" >

    <pathconvert targetos="unix" property="run.path.unix" refid="project.run.class.path"/>
    <echo>${run.path.unix}</echo>
    <java classname="amd.strainer.AutoStrainEntry" fork="true" maxmemory="396m">
      <classpath refid="project.run.class.path"/>
    </java>
  </target>

  <target name="run" depends="compile"
          description="launches the GUI" >

    <pathconvert targetos="unix" property="run.path.unix" refid="project.run.class.path"/>
    <echo>${run.path.unix}</echo>
    <java classname="${my.main.class}" fork="true" maxmemory="1396m">
      <classpath refid="project.run.class.path"/>
    </java>
  </target>

  <target name="jar" depends="compile"
        description="package class files" >
    <!-- unpack needed jars into build dir as a hack -->
    <unjar src="lib/jlfgr-1_0.jar" dest="${build}"/>
    <unjar src="lib/biojava-1.7.1.jar" dest="${build}"/>
    <unjar src="lib/bytecode.jar" dest="${build}"/>
    <unjar src="lib/jaligner.jar" dest="${build}"/>
    <!--unjar src="lib/xerces.jar" dest="${build}"/>
    <unjar src="lib/commons-cli.jar" dest="${build}"/>
    <unjar src="lib/commons-collections-2.1.jar" dest="${build}"/>
    <unjar src="lib/commons-pool-1.1.jar" dest="${build}"/>
    <unjar src="lib/commons-dbcp-1.1.jar" dest="${build}"/-->

    <jar jarfile="${dist}/lib/strainer.jar" basedir="${build}">
      <manifest>
        <!--attribute name="Class-Path" value="jlfgr-1_0.jar mysql-connector-java-3.1.6.bin.jar biojava-1.30-jdk14.jar bytecode-0.91.jar jakarta-regexp.jar xerces.jar"/-->
        <attribute name="Main-Class" value="${my.main.class}"/>
      </manifest>
    </jar>
  </target>

  <target name="dist" depends="jar"
        description="generate the distribution" >

    <!-- copy todir="${dist}/lib">
      <fileset dir="lib">
        <include name="*.jar"/>
        <include name="*.zip"/>
      </fileset>
      <fileset dir=".">
        <include name="applet.html"/>
      </fileset>
    </copy -->

    <copy todir="${dist}">
      <fileset dir=".">
        <include name="README.txt"/>
        <include name="License.txt"/>
		<include name="Manual.doc"/>
		<include name="Manual.pdf"/>
      </fileset>
    </copy>
  </target>

  <target name="package" depends="dist"
        description="generate the final file" >

    <jar jarfile="${my.dist.name}.jar" basedir="${dist}">
      <manifest>
        <attribute name="Built-By" value="${user.name}"/>
        <attribute name="Date-Stamp" value="${DSTAMP}"/>
      </manifest>
    </jar>
  </target>

  <target name="source"
        description="generate the source archive file" >

    <jar jarfile="${my.source.name}.jar" basedir="." includes="Manual.pdf Manual.doc License.txt README.txt src/** build.xml lib/biojava-1.4.jar lib/junit_3.8.1.jar lib/biojava-1.4.jar lib/jlfgr-1_0.jar lib/bytecode-0.92.jar">
      <manifest>
        <attribute name="Built-By" value="${user.name}"/>
        <attribute name="Date-Stamp" value="${DSTAMP}"/>
      </manifest>
    </jar>
  </target>

  <target name="clean"
        description="clean up" >
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
  </target>
</project>
